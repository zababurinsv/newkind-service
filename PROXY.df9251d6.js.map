{"mappings":"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","sources":["node_modules/comlink/src/comlink.ts","frontend/src/PROXY.mjs"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import * as Comlink from \"comlink\";\nlet CACHE_NAME = '\"@newkind/cache@0.1.0\"';\nlet urlsToCache = [\n    '/'\n];\n//1s\nlet CONFIG = {\n    CACHE: CACHE_NAME,\n    URLS: urlsToCache,\n    AllowList: [CACHE_NAME, 'blog-posts-cache-v1'],\n    timeout: 0,\n    memory: {},\n    progressIndicatorUrls: \"/\\?requestId=/i;\",\n    strategy: {\n        NetworkOrCache: false,\n        CacheOnly: false,\n        CacheAndUpdate: false,\n        CacheUpdateAndRefresh: false,\n        EmbeddedFallback: false\n    },\n    contentType: (destination) => {\n        switch (destination) {\n            case'audio':\n                return 'audio/mpeg'\n                break\n            default:\n                return false\n                break\n        }\n    }\n}\n\nself.addEventListener(\"install\", (event) => {\n\n    event.waitUntil(self.skipWaiting())\n    event.waitUntil(\n        caches.open(CONFIG.CACHE)\n            .then(function(cache) {\n\n                return cache.addAll(CONFIG.URLS);\n            })\n    );\n\n    console.log('🖤 service install')\n});\n\nself.addEventListener(\"activate\", (event) => {\n    event.waitUntil(self.clients.claim())\n    event.waitUntil(\n        caches.keys().then(function(cacheNames) {\n            return Promise.all(\n                cacheNames.map(function(cacheName) {\n                    if (CONFIG.AllowList.indexOf(cacheName) === -1) {\n                        return caches.delete(cacheName);\n                    }\n                })\n            );\n        })\n    );\n    console.log('🖤 service activate')\n});\n\nself.addEventListener('notificationclick', function(event) {\n    console.log('🖤 service notificationclick', event)\n    // event.notification.close();\n\n    // var promise = new Promise(function(resolve) {\n    //     setTimeout(resolve, 1000);\n    // }).then(function() {\n    //     return clients.openWindow(event.data.locator);\n    // });\n    //\n    // event.waitUntil(promise);\n});\n\nself.addEventListener('push', function(event) {\n    console.log('🖤 service push', event)\n    // console.log('Received a push message', event);\n    // let title = 'Yay a message.';\n    // let body = 'We have received a push message.';\n    // let icon = '/images/icon-192x192.png';\n    // let tag = 'simple-push-demo-notification-tag';\n    // event.waitUntil(\n    //     self.registration.showNotification(title, {\n    //         body: body,\n    //         icon: icon,\n    //         tag: tag\n    //     })\n    // );\n});\n\nself.addEventListener('sync', (event) => {\n    console.log('🖤 service sync', event)\n    // console.log('event sync', event)\n    // if (event.tag == 'event1') {\n    //     event.waitUntil(doSomething())\n    // }вввпарапsssssssssss\n})\n\nself.addEventListener('fetch', event => {\n    console.log('🖤 service fetch')\n    if(CONFIG.strategy.NetworkOrCache) {\n        event.respondWith(fromNetwork(event.request, CONFIG.timeout)\n            .catch((err) => {\n                //console.log(`Error: ${err.message()}`);\n                fromCache(event.request);\n                // .catch(() => return useFallback()));\n            }));\n    } else if(CONFIG.strategy.CacheOnly) {\n        event.respondWith(fromCache(event.request));\n    } else if(CONFIG.strategy.CacheAndUpdate) {\n        event.respondWith(fromCache(event.request));\n        event.waitUntil(update(event.request));\n    } else if(CONFIG.strategy.CacheUpdateAndRefresh) {\n        // Как и в предыдущем примере, сначала `respondWith()` потом `waitUntil()`\n        event.respondWith(fromCache(event.request));\n        event.waitUntil(\n            update(event.request)\n                // В конце, после получения \"свежих\" данных от сервера уведомляем всех клиентов.\n                .then(refresh)\n        );\n    } else {\n        event.respondWith(fetch(new Request(event.request,{ headers: {\n                'Content-Type': CONFIG.contentType(event.request.destination)\n            }}))\n            .then(response => {\n                //console.log('*** service response ***')\n                    if(!response || response.status !== 200 || response.type !== 'basic') {\n                        return response;\n                    }\n                    return response;\n                }\n            ).catch(() => useFallback() )\n        );\n    }\n})\n\nself.addEventListener(\"message\", async (event) => {\n    if (event.data && event.data.state && event.data.state.isConnected && event.data.state.type === \"proxy-memory\") {\n        console.log('🌼 🎫 service message', event.data.state)\n        for(let port in event.data.state.to) {\n            CONFIG.memory = Comlink.wrap(event.data.state.to[port])\n        }\n       event.source.postMessage({\n            state: {\n                'proxy-memory': true\n            }\n        })\n    } else {\n        if(event.data.test) {\n            await CONFIG.memory.fs.list.dir()\n            event.source.postMessage({\n                state: {\n                    '~~~~~ test ~~~~~': true\n                }\n            })\n        }\n    }\n});\n\nfunction fromNetwork(request, timeout) {\n    return new Promise((fulfill, reject) => {\n        let timeoutId = setTimeout(reject, timeout);\n        fetch(request).then((response) => {\n            clearTimeout(timeoutId);\n            fulfill(response);\n        }, reject);\n    });\n}\n\nfunction fromCache(request) {\n    return caches.open(CONFIG.CACHE).then((cache) =>\n        cache.match(request).then((matching) =>\n            matching || Promise.reject('no-match')\n        ));\n}\n\nfunction update(request) {\n    return caches.open(CONFIG.CACHE).then((cache) =>\n        fetch(request).then((response) =>\n            // cache.put(request, response)\n            cache.put(request, response.clone()).then(() => response)\n        )\n    );\n}\n\n// Шлём сообщения об обновлении данных всем клиентам.\nfunction refresh(response) {\n    return self.clients.matchAll().then((clients) => {\n        clients.forEach((client) => {\n            // Подробнее про ETag можно прочитать тут\n            // https://en.wikipedia.org/wiki/HTTP_ETag\n            const message = {\n                type: 'refresh',\n                url: response.url,\n                eTag: response.headers.get('ETag')\n            };\n            // Уведомляем клиент об обновлении данных.\n            client.postMessage(JSON.stringify(message));\n        });\n    });\n}\nconst FALLBACK =\n    '<div>\\n' +\n    '    <div>App Title</div>\\n' +\n    '    <div>you are offline</div>\\n' +\n    '    <img src=\"/svg/or/base64/of/your/dinosaur\" alt=\"newkind\"/>\\n' +\n    '</div>';\n\nfunction useFallback() {\n    return Promise.resolve(new Response(FALLBACK, { headers: {\n            'Content-Type': 'text/html; charset=utf-8'\n    }}));\n}"],"names":["$10a9dddd16537567$export$be5234c0b764b6e0","Symbol","val","$10a9dddd16537567$export$ab8f1c00731ee83e","Map","$10a9dddd16537567$var$isObject","serialize","obj","port1","port2","MessageChannel","port","value","$10a9dddd16537567$var$throwMarker","serialized","Error","isError","message","name","stack","Object","assign","obj1","ep","self","callback","ev","data","id","type","path","argumentList","map","$10a9dddd16537567$var$fromWireValue","slice","reduce","prop","rawValue","returnValue1","apply","parent","$10a9dddd16537567$export$9b7f6e342a8cbd38","transfers","$10a9dddd16537567$var$transferCache","set","$10a9dddd16537567$export$c9b234447cf4ef7c","undefined","value1","Promise","resolve","catch","then","returnValue","wireValue","transferables","$10a9dddd16537567$var$toWireValue","postMessage","removeEventListener","$10a9dddd16537567$var$closeEndPoint","start","endpoint","constructor","close","target","isReleased","Proxy","isProxyReleased","$10a9dddd16537567$var$requestResponseMessage","p","toString","r","bind","_target","$10a9dddd16537567$var$throwIfProxyReleased","_thisArg","rawArgumentList","last","length","$10a9dddd16537567$export$39fb953702b7fcd7","$10a9dddd16537567$var$createProxy","$10a9dddd16537567$var$processArguments","construct","proxy","processed","v","arr","Array","prototype","concat","WeakMap","handler","canHandle","serializedValue","get","deserialize","msg","$ac803cc008b03826$var$CONFIG","CACHE","URLS","AllowList","timeout","memory","progressIndicatorUrls","strategy","NetworkOrCache","CacheOnly","CacheAndUpdate","CacheUpdateAndRefresh","EmbeddedFallback","contentType","destination","$ac803cc008b03826$var$fromCache","request","caches","open","cache","match","matching","reject","$ac803cc008b03826$var$update","fetch","response","put","clone","$ac803cc008b03826$var$refresh","clients","matchAll","forEach","client","url","eTag","headers","JSON","stringify","addEventListener","event","waitUntil","skipWaiting","addAll","console","log","claim","keys","cacheNames","all","cacheName","indexOf","delete","respondWith","fulfill","timeoutId","setTimeout","clearTimeout","err","Request","status","Response","$ac803cc008b03826$var$FALLBACK","async","state","isConnected","to","$10a9dddd16537567$export$4997ffc0176396a6","source","test","fs","list","dir"],"version":3,"file":"PROXY.df9251d6.js.map"}