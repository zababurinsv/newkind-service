{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
let NONE = "none"
let VOTERS = 3
let QUORUM = 2
let VOTING = "voting"
let REVEAL = "reveal"
let FEATURED = "featured"
let DELISTED = "delisted"
func getNumberByKey(key:String) = {
    let num = match getInteger(this, key){
case a:Int => a
case _ => 0
}
num
}
func getStrByKey(key:String) = {
    let str = match getString(this, key){
case a:String => a
case _ => NONE
}
str
}
func getKeyItemPrice(item:String) = { item + "_price" }
func getValueItemPrice(item:String) = { getNumberByKey(getKeyItemPrice(item)) }
func getKeyUserItemCounter(user:String, item:String) = { item + "_" + user + "_cnt" }
func getValueUserItemCounter(user:String, item:String) = {getNumberByKey(getKeyUserItemCounter(user, item))}
func getKeyItem(supplier:String, title:String) = { "item_" + toBase58String(sha256(toBytes(supplier + title))) }
func getKeyItemData(item:String) = { item + "_data"}
func getKeyItemSupplier(item:String) = { item + "_owner"}
func getValueItemSupplier(item:String) = { getStrByKey(getKeyItemSupplier(item))}
func getKeyBalanceSupplier(account:String) = { account + "_balance"}
func getValueBalanceSupplier(account:String) = { getNumberByKey(getKeyBalanceSupplier(account)) }

func getKeyCommit(item:String, user:String) = { item + "_" + user + "_commit" }
func getValueCommit(item:String, user:String) = { getStrByKey(getKeyCommit(item, user)) }
func getKeyCommitsCount(item:String) = { item + "_comcnt" }
func getValueCommitsCount(item:String) = { getNumberByKey(getKeyCommitsCount(item)) }
func getKeyReveal(item:String, user:String) = { item + "_" + user + "_reveal" }
func getValueReveal(item:String, user:String) = { getStrByKey(getKeyReveal(item, user)) }
func getKeyItemStatus(item:String) = { item + "_status" }
func getValueItemStatus(item:String) = { getStrByKey(getKeyItemStatus(item)) }
func getKeyVoteCount(item:String, voute:String) = { item + "_res:" + voute }
func getValueVouteCount(item:String, voute:String) = { getNumberByKey(getKeyVoteCount(item, voute)) }

let laneBook = base58'DKu7YW7NzQwTGqcRgaeTMoDjXNcoYHgm7BERU9gVSoGA'

@Callable(i)
func withdraw(amount: Int) = {
        let currentKey = toBase58String(i.caller.bytes)
        let currentAmount = match getInteger(this, currentKey){
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount - amount

        if(amount < 0) then throw("Can not withdraw negative amount")
        else if(newAmount < 0) then throw("not enough balance")
        else ScriptResult(

        WriteSet([ DataEntry(currentKey, newAmount)]),
        TransferSet([ScriptTransfer(i.caller, amount, laneBook)])
        )
}

@Callable(i)
func deposit() = {
    let pmt = extract(i.payment)
    if(pmt.assetId != laneBook) then throw("DKu7YW7NzQwTGqcRgaeTMoDjXNcoYHgm7BERU9gVSoGA only at the moment")
    else{
        let currentKey = toBase58String(i.caller.bytes)
        let currentAmount = match getInteger(this, currentKey){
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount + pmt.amount
        WriteSet([DataEntry(currentKey,newAmount)])
    }
}
